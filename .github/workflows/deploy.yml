name: Deploy Microservices

on:
  workflow_call:
    inputs:
      spring_profile:
        type: string
        required: true
      environment:
        type: string
        required: true
    secrets:
      DOCKER_USERNAME:
        description: 'Docker Hub username'
        required: true
      DOCKER_PASSWORD:
        description: 'Docker Hub password or access token'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Download previous tag artifact (production only)
        if: inputs.environment == 'production'
        uses: actions/download-artifact@v4
        with:
          name: latest-tag
          path: artifacts/
        continue-on-error: true

      - name: Load previous tag
        id: previous
        if: inputs.environment == 'production'
        run: |
          if [ -f artifacts/latest-tag.txt ]; then
            PREVIOUS_TAG=$(cat artifacts/latest-tag.txt)
            echo "Previous tag found: $PREVIOUS_TAG"
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          else
            echo "No previous tag found (first deployment?)"
            echo "previous_tag=none" >> $GITHUB_OUTPUT
          fi

      - name: Set current tag
        id: current
        run: |
          TAG="${{ inputs.spring_profile }}-$(date +%Y%m%d%H%M%S)"
          echo "current_tag=$TAG" >> $GITHUB_OUTPUT
          echo "Deploying with tag: $TAG"

      - name: Deploy services
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "Deploying to production with tag ${{ steps.current.outputs.current_tag }}..."
            docker-compose up -d --no-recreate
          else
            echo "Deploying to development with tag ${{ steps.current.outputs.current_tag }}..."
            docker-compose up -d
          fi
        env:
          SPRING_PROFILES_ACTIVE: ${{ inputs.spring_profile }}

      - name: Verify service health
        run: |
          echo "Verifying service health for ${{ inputs.environment }}..."
          for i in {1..10}; do
            if curl -f http://localhost:8080/actuator/health &&
               curl -f http://localhost:8081/actuator/health &&
               curl -f http://localhost:8082/actuator/health &&
               curl -f http://localhost:8083/actuator/health &&
               curl -f http://localhost:8084/actuator/health; then
              echo "All services are healthy!"
              exit 0
            fi
            echo "Waiting for services to be healthy..."
            sleep 10
          done
          echo "Some services are unhealthy!"
          exit 1

      - name: Rollback on failure (production only)
        if: failure() && inputs.environment == 'production'
        run: |
          echo "Rolling back production..."
          docker-compose down
          if [ "${{ steps.previous.outputs.previous_tag }}" != "none" ]; then
            echo "Reverting to previous tag: ${{ steps.previous.outputs.previous_tag }}"
            export SPRING_PROFILES_ACTIVE=${{ steps.previous.outputs.previous_tag }}
            docker-compose pull
            docker-compose up -d --no-recreate
          else
            echo "No previous tag available, stopping services..."
            docker-compose down
          fi
        env:
          SPRING_PROFILES_ACTIVE: ${{ inputs.spring_profile }}

      - name: Save current tag as artifact (production only)
        if: inputs.environment == 'production' && !failure()
        run: |
          echo "${{ steps.current.outputs.current_tag }}" > latest-tag.txt
          mkdir -p artifacts
          mv latest-tag.txt artifacts/

      - name: Upload current tag artifact (production only)
        if: inputs.environment == 'production' && !failure()
        uses: actions/upload-artifact@v4
        with:
          name: latest-tag
          path: artifacts/latest-tag.txt

      - name: Clean up
        run: |
          docker system prune -f