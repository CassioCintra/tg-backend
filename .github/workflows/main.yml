name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Find microservices
        id: find-services
        run: |
          SERVICES="ms-customer,ms-delivery,ms-order,ms-product,ms-shopping-cart"
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

      - name: Validate dependencies
        run: |
          IFS=',' read -ra SERVICES <<< "${{ steps.find-services.outputs.services }}"
          for service in "${SERVICES[@]}"; do
            echo "Validating dependencies for $service..."
            cd "$service" || exit 1
            mvn dependency:resolve --fail-at-end
            cd - >/dev/null || exit 1
          done

  build:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ms: ['ms-customer', 'ms-delivery', 'ms-order', 'ms-product', 'ms-shopping-cart']
      fail-fast: false  # Permite que os outros servi√ßos continuem mesmo se um falhar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Maven package
        run: |
          cd ${{ matrix.ms }}
          mvn clean install -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd ${{ matrix.ms }}
          PROFILE="${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
          TAG="$PROFILE-$(date +%Y%m%d%H%M%S)"
          docker build -t cassiocintra/tg-backend:$TAG \
            --build-arg SPRING_PROFILES_ACTIVE=$PROFILE .
          docker tag cassiocintra/tg-backend:$TAG cassiocintra/tg-backend:$PROFILE
          docker push cassiocintra/tg-backend:$TAG
          docker push cassiocintra/tg-backend:$PROFILE

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ms: ['ms-customer', 'ms-delivery', 'ms-order', 'ms-product', 'ms-shopping-cart']
      fail-fast: false  # Permite que os testes continuem mesmo se um falhar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Test Microservice ${{ matrix.ms }}
        run: |
          cd ${{ matrix.ms }}
          mvn test
        env:
          SPRING_PROFILES_ACTIVE: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy services
        run: |
          PROFILE="${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
          echo "Deploying to $PROFILE..."
          export SPRING_PROFILES_ACTIVE=$PROFILE
          if [ "$PROFILE" = "production" ]; then
            docker-compose up -d --no-recreate
          else
            docker-compose up -d
          fi