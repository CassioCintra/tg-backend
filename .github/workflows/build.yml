name: Build and Push Images

on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ms: ['ms-customer', 'ms-delivery', 'ms-order', 'ms-product', 'ms-shopping-cart']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Maven package
        run: |
          cd ${{ matrix.ms }}
          mvn clean install -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ms }}-build
          path: ${{ matrix.ms }}/target/*.jar
          if-no-files-found: error

  push:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ms: ['ms-customer', 'ms-delivery', 'ms-order', 'ms-product', 'ms-shopping-cart']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ matrix.ms }}
          key: ${{ runner.os }}-buildx-${{ matrix.ms }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.ms }}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from pom.xml
        id: get-version
        run: |
          cd ${{ matrix.ms }}
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          cd ${{ matrix.ms }}
          PROFILE="${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
          VERSION="${{ steps.get-version.outputs.version }}"
          IMAGE_NAME="cassiocintra/$PROFILE-${{ matrix.ms }}"
          docker buildx build \
            -t $IMAGE_NAME:$VERSION \
            -t $IMAGE_NAME:latest \
            --build-arg SPRING_PROFILES_ACTIVE=$PROFILE \
            --cache-from=type=local,src=/tmp/.buildx-cache-${{ matrix.ms }} \
            --cache-to=type=local,dest=/tmp/.buildx-cache-${{ matrix.ms }},mode=max \
            --push .
          echo "Pushed $IMAGE_NAME:$VERSION and $IMAGE_NAME:latest"